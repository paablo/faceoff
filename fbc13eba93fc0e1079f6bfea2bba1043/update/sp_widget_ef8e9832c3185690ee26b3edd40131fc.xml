<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, spUtil, $location, spAriaFocusManager) {
	$scope.$on('data_table.click', function(e, parms){
		var p = $scope.data.page_id || 'fo-form';
		var sysId = parms.record[$scope.options.page_link_field].value;
		console.log($scope.options.page_link_field);
		console.log(parms);
		var s = {id: p, table: $scope.options.page_link_table, sys_id: sysId, view: 'sp'};
		var newURL = $location.search(s);
		spAriaFocusManager.navigateToLink(newURL.url());
	});
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table,filter,field_list,maximum_entries,order_by,order_direction,title,color,glyph,sp_page</field_list>
        <has_preview>false</has_preview>
        <id>fo-table-from-instance</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>fo-table-from-instance</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function(){
	/*  "use strict"; - linter issues */
	// populate the 'data' object
	var sp_page = $sp.getValue('sp_page');
	var pageGR = new GlideRecord('sp_page');
	pageGR.get(sp_page);
	data.page_id = pageGR.getValue("id");
	$sp.getValues(data);
	if (data.field_list) {
		data.fields_array = data.field_list.split(',');
	} else {
		data.field_list = $sp.getListColumns(data.table);
	}

	if (input) {
		data.p = input.p;
		data.o = input.o;
		data.d = input.d;
		data.q = input.q;
		// additional inputs for using a spModal
		data.table = input.table;
		data.filter = input.filter;
		data.view = input.view;
	}
	data.p = data.p || 1;
	data.o = data.o || $sp.getValue('order_by');
	data.d = data.d || $sp.getValue('order_direction');

	data.page_index = (data.p - 1);
	data.window_size = $sp.getValue('maximum_entries') || 10;
	data.window_start  = (data.page_index * data.window_size);
	data.window_end = (((data.page_index + 1) * data.window_size));
	// adding data.filter here so 
	// it can be picked up from an input.filter above
	data.filter = data.filter || $sp.getValue("filter");

	var gr = new GlideRecordSecure(data.table);
	if (!gr.isValid()) {
		data.invalid_table = true;
		data.table_label = data.table;
		return;
	}
	data.table_label = gr.getLabel();

	options.table = data.table;
	options.fields = data.field_list;
	options.o=data.o;
	options.d= data.d;
	options.filter=data.filter;
	options.window_size=data.window_size;
	options.view = data.view;
	options.useInstanceTitle = true; // to make sure Data Table widget uses headerTitle always
	options.headerTitle = options.title;
	options.show_breadcrumbs=true;
	
	data.dataTableWidget = $sp.getWidget('widget-data-table', options);
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>sn-nerd</sys_created_by>
        <sys_created_on>2024-09-01 02:11:19</sys_created_on>
        <sys_id>ef8e9832c3185690ee26b3edd40131fc</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>fo-table-from-instance</sys_name>
        <sys_package display_value="FaceOff" source="x_43553_faceoff">fbc13eba93fc0e1079f6bfea2bba1043</sys_package>
        <sys_policy/>
        <sys_scope display_value="FaceOff">fbc13eba93fc0e1079f6bfea2bba1043</sys_scope>
        <sys_update_name>sp_widget_ef8e9832c3185690ee26b3edd40131fc</sys_update_name>
        <sys_updated_by>sn-nerd</sys_updated_by>
        <sys_updated_on>2024-09-01 02:27:56</sys_updated_on>
        <template><![CDATA[<div>
  <div class="alert alert-danger" ng-if="data.invalid_table">
    ${Table not defined} '{{data.table_label}}'
  </div>
  <sp-widget ng-if="data.dataTableWidget" widget="data.dataTableWidget"></sp-widget>
</div>]]></template>
    </sp_widget>
</record_update>
