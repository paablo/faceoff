<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_43553_faceoff.FaceOffUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>FaceOffUtils</name>
        <script><![CDATA[var FaceOffUtils = Class.create();

FaceOffUtils.CountCompetitorsOnLeaderboard = function(leaderboardGr, isRanked) {
    if (gs.nil(isRanked)) {
        isRanked = true;
    }
    var rankedCompetitorsCount = 0;
    var rankedCompetitorsGa = new GlideAggregate('x_43553_faceoff_leaderboard_ranking');
    rankedCompetitorsGa.addQuery('ranked=' + isRanked + '^leaderboard=' + leaderboardGr.sys_id);
    rankedCompetitorsGa.addAggregate('COUNT');
    rankedCompetitorsGa.query();
    if (rankedCompetitorsGa.next()) {
        rankedCompetitorsCount = parseInt(rankedCompetitorsGa.getAggregate('COUNT'));
    }

    return rankedCompetitorsCount; // return the calculated value
};

FaceOffUtils.GetCurrentJudgeIntegration = function() {
	var sysId = '';
	var judgeSysId = FaceOffUtils.GetCurrentJudgeSysId();
	var integrationGr = new GlideRecord('x_43553_faceoff_judge_integration');
	integrationGr.addQuery('judge',judgeSysId);
	integrationGr.setLimit(1);
	integrationGr.query();
	if (integrationGr.next()) {
		sysId = integrationGr.getUniqueValue();
	}

	return sysId;
};
FaceOffUtils.GetCurrentJudgeSysId = function() {
    var sysId = '';
    var judgeGr = new GlideRecord('x_43553_faceoff_judge');
    judgeGr.addQuery('user', gs.getUserID());
    judgeGr.setLimit(1);
    judgeGr.query();
    if (judgeGr.next()) {
        sysId = judgeGr.getValue('sys_id');
    }

    return sysId;
};

FaceOffUtils.GetMostPlayedCompetitor = function() {
    var mostPlayedOpponentSysId;
    var mostPlayedCompetitorGr = new GlideRecord('x_43553_faceoff_opponent_judgement_eligibility');
    mostPlayedCompetitorGr.addQuery('judge', FaceOffUtils.GetCurrentJudgeSysId());
    mostPlayedCompetitorGr.orderByDesc('weight');
    mostPlayedCompetitorGr.setLimit(1);
    mostPlayedCompetitorGr.query();
    if (mostPlayedCompetitorGr.next()) {
        mostPlayedOpponentSysId = mostPlayedCompetitorGr.getValue('opponent');
    }
    return mostPlayedOpponentSysId;
};

FaceOffUtils.GetRandomCompetitorsCriterion = function() {
    // get a random criterion first, so even probability of any criterion
    var randomCriterionSysId = new FaceOffUtils().getRandomCriterionWithPotentialMatch();
    // loook at criterion, join on my competitors
    var opponentsCriterionGr = new GlideRecord('x_43553_faceoff_opponent_criterion');
    // must be a criterion of an opponent that the user can judge
    var qry = opponentsCriterionGr.addQuery('criterion', randomCriterionSysId);
    var jQry = opponentsCriterionGr.addJoinQuery('x_43553_faceoff_opponent_judgement_eligibility', 'opponent', 'opponent');
    jQry.addCondition('judge', FaceOffUtils.GetCurrentJudgeSysId());
	opponentsCriterionGr.addQuery('opponent.active','true');
    opponentsCriterionGr.query();
    var totalRecords = opponentsCriterionGr.getRowCount();
    var randomNumber = Math.floor(Math.random() * totalRecords);
    var count = 0;
    // GlideRecord.setLocation() not available in scope, so have to cycle through all records
    while (opponentsCriterionGr.next()) {
        count++;
        if (count == randomNumber) {
            gs.info(opponentsCriterionGr.getDisplayValue() + '');
            break;
        }
    }

    return opponentsCriterionGr;
};
FaceOffUtils.prototype = {
    initialize: function() {

        this.algoGr = this.getDefaultOpponentSelectionAlogGr();
        this.judgeGr = new GlideRecord('x_43553_faceoff_judge');
        this.judgeGr.get(FaceOffUtils.GetCurrentJudgeSysId());
		this.judgeSysId = this.judgeGr.getValue('sys_id');
		this.filterRelevantOnly = false;
    },

	setFilterRelevantOnly: function() {
		this.filterRelevantOnly = true;
	},

	getDefaultOpponentSelectionAlogGr: function() {
		var algoGr;
		var judgeSysId = FaceOffUtils.GetCurrentJudgeSysId();
		var integrationGr = new GlideRecord('x_43553_faceoff_judge_integration');
		integrationGr.addQuery('judge',judgeSysId);
		integrationGr.setLimit(1);
		integrationGr.query();
		if (integrationGr.next()) {
			algoGr = integrationGr.default_next_competitor_selection_algorithm.getRefRecord();
		} 

		return algoGr;
	},

	// Get a random criterion with at least 2 of users competitors so a match up can be made
    getRandomCriterionWithPotentialMatch: function() {
        var criterions = [];
        var ga = new GlideAggregate('x_43553_faceoff_users_rankable_criterions');
        ga.addQuery("myco_judge=" + this.judgeSysId);
        ga.groupBy("opcr_criterion");
        ga.addAggregate("COUNT");
        ga.orderByAggregate("COUNT");
        ga.query();
        while (ga.next()) {
            var competitorCount = ga.getAggregate("COUNT");
            var criterionDisplay = ga.getDisplayValue("opcr_criterion");
            if (competitorCount > 1) {
                criterions.push(ga.getValue("opcr_criterion"));
            }
        }

        var totalRecords = criterions.length;
        var randomNumber = Math.floor(Math.random() * totalRecords);
        var randomCriteria = criterions[randomNumber];

		return randomCriteria;
    },

    startFaceOffFromCriterion: function(criterionGr) {
        // get most exp competitor that has criterion
        var competitorSysId;

        // Get my most experienced competitor that has the criterion
        var myCompetitorGr = new GlideRecord('x_43553_faceoff_opponent_judgement_eligibility');
        myCompetitorGr.addQuery('judge', FaceOffUtils.GetCurrentJudgeSysId());
        var criterionJoinQry = myCompetitorGr.addJoinQuery('x_43553_faceoff_opponent_criterion', 'opponent', 'opponent');
        criterionJoinQry.addCondition('criterion', criterionGr.getValue('sys_id'));
        myCompetitorGr.orderByDesc('weight');
        myCompetitorGr.setLimit(1);
        myCompetitorGr.query();
        if (myCompetitorGr.next()) {
            competitorSysId = myCompetitorGr.getValue('opponent');
        }

        // Get competitors criterion record for faceoff
        var opponentCriteriaGr = new GlideRecord('x_43553_faceoff_opponent_criterion');
        opponentCriteriaGr.addQuery('criterion', criterionGr.getValue('sys_id'));
        opponentCriteriaGr.addQuery('opponent', competitorSysId);
        opponentCriteriaGr.setLimit(1);
        opponentCriteriaGr.query();
        if (opponentCriteriaGr.next()) {
            nextFaceOffGr = this.faceOff(opponentCriteriaGr);
        }

        if (gs.nil(nextFaceOffGr)) {
			gs.addInfoMessage("Could not find any matches. Finding random games to rank instead...");
			this.setFilterRelevantOnly();
			nextFaceOffGr = this.faceOffMostRelevant();
		}
		
        return nextFaceOffGr;
    },

    startFaceOffFromOpponentSysId: function(opponentSysId) {
        // get top criterion
        var nextFaceOffGr;
        var opponentCriteriaGr = new GlideRecord('x_43553_faceoff_opponent_criterion');
        opponentCriteriaGr.addQuery('opponent', opponentSysId);
        opponentCriteriaGr.orderBy('rank');
        opponentCriteriaGr.query();

        while (opponentCriteriaGr.next()) {
            nextFaceOffGr = this.faceOff(opponentCriteriaGr);
            if (!gs.nil(nextFaceOffGr) && nextFaceOffGr.getTableName() == 'x_43553_faceoff_faceoff_instance') {
                break;
            }
        }

        return nextFaceOffGr;
    },

    getOpponentCriteria: function(opponentSysId, criteriaSysId) {
        var opponentCriteriaGr = new GlideRecord('x_43553_faceoff_opponent_criterion');
        opponentCriteriaGr.addQuery('opponent', opponentSysId);
        opponentCriteriaGr.addQuery('criterion', criteriaSysId);
        opponentCriteriaGr.query();
        opponentCriteriaGr.next();

        return opponentCriteriaGr;
    },

	faceOffMostRelevant: function() {
		var nextFaceOffGr;
		var initialSelection = new NextLeaderboardAndCompetitorSelection();
		var relevantSelections = initialSelection.getLeaderboardAndCompetitorSelection();

		relevantSelections.some(selection => {
			var opponentCriterionGr = this.getOpponentCriteria(
				selection.opponent_sys_id, 
				selection.criterion_sys_id
			);
			var breakLoop = false;
			var outputs = this._faceOff(opponentCriterionGr);
			var hasMatch = outputs['successful'];
			if (hasMatch) {
				nextFaceOffGr = outputs['faceoff']; // Reference
				breakLoop = true; //break the loop, use next best match
			}

			return breakLoop; // continue
		} );
		
		//todo: loop
		
		return nextFaceOffGr;
	},

    faceOffNextBestMatch: function(faceOffGr) {
        var nextFaceOffGr;
        var opponentFound = false;
        var nextBestMatchesGr = this.getNextBestMatches(faceOffGr.opponent_selections, faceOffGr.opponent_2);
        nextBestMatchesGr.query();
        while (!opponentFound && nextBestMatchesGr.next()) {
            var nextBestMatchingOpponentGr = nextBestMatchesGr.selected_opponent.getRefRecord();
            nextFaceOffGr = this.getNextFaceoff(nextBestMatchingOpponentGr.sys_id, faceOffGr.criterion);
            if (!gs.nil(nextFaceOffGr) && nextFaceOffGr.getTableName() == 'x_43553_faceoff_faceoff_instance') {
                opponentFound = true;
                break;
            }
            // continue through matches until a faceoff can be created
        }

        if (!opponentFound) {
            var leaderBoardGr = faceOffGr.leaderboard.getRefRecord();
            gs.addInfoMessage('Could not find opponents to face off for ' + leaderBoardGr.getDisplayValue() + ".");
            gs.addInfoMessage("Finding random competitors to FaceOff");
            this.setFilterRelevantOnly();
			nextFaceOffGr = this.faceOffMostRelevant();
        }
        return nextFaceOffGr;
    },

    getNextBestMatches: function(opponentSelectionInstanceSysId, selectedOpponentSysId) {

        var qry = `opponent_selecion_instance=${opponentSelectionInstanceSysId}^selected_opponent!=${selectedOpponentSysId}`;
        var selectionRankingGr = new GlideRecord('x_43553_faceoff_opponent_selection_ranking');
        selectionRankingGr.addEncodedQuery(qry);
        selectionRankingGr.orderBy('ranking');

        return selectionRankingGr;
    },

    faceOff: function(opponentCriterionGr) {
        var faceOffGr;
		var outputs = this._faceOff(opponentCriterionGr);
		var hasMatch = outputs['successful'];
		if (hasMatch) {
			faceOffGr = outputs['faceoff']; // Reference
		} else {
			var opponentSelectionInstanceGr = outputs['selections'];
			faceOffGr = this.tryAllMatches(opponentSelectionInstanceGr);		
		}
        return faceOffGr;
    },

	tryAllMatches: function(opponentSelectionInstanceGr) {
		var faceOffGr;
		var hasMatch;
		// try again against next eligible result
		// get all possible matches by doing a faceoff for each opponent
		var opponentMatchesGr = new GlideRecord('x_43553_faceoff_opponent_selection_ranking');
		opponentMatchesGr.addEncodedQuery('opponent_selecion_instance=' + opponentSelectionInstanceGr.getValue('sys_id'));
		opponentMatchesGr.query();
		while(opponentMatchesGr.next()) {
			var nextOpponentCriterionGr = this.getOpponentCriteria(
				opponentMatchesGr.getValue('selected_opponent'),
				opponentSelectionInstanceGr.getValue('criterion')
			);
			outputs = this._faceOff(nextOpponentCriterionGr);
			hasMatch = outputs['successful'];
			if (hasMatch) {
				faceOffGr = outputs['faceoff']; 
				break;
			}
		}
		return faceOffGr;
	},
	
	_faceOff: function(opponentCriterionGr) {
		var outputs;
		try {
			var inputs = {};
			inputs['opponent_criterion'] = opponentCriterionGr; // GlideRecord of table: x_43553_faceoff_opponent_criterion 
			inputs['algorithm'] = this.algoGr;
			inputs['judge'] = this.judgeGr; // GlideRecord of table: x_43553_faceoff_judge 
			inputs['filter_relevant'] = this.filterRelevantOnly;
			var result = sn_fd.FlowAPI.getRunner().subflow('x_43553_faceoff.faceoff').inForeground().withInputs(inputs).run();
			outputs = result.getOutputs();

		} catch (e) {
			var errMsg = 'Failed to initiate faceoff. Please try another opponent or criterion. Error: ' + e.toString();
            gs.addErrorMessage(errMsg);
			gs.error(errMsg + ":" + e);
            outputs = opponentCriterionGr;
		}

		return outputs;
	},

    getNextFaceoff: function(opponentSysId, criteriaSysId) {
        var opponentCriterionGr = this.getOpponentCriteria(opponentSysId, criteriaSysId);
        var nextFaceOffGr = this.faceOff(opponentCriterionGr);
		if (gs.nil(nextFaceOffGr)) {
			gs.addInfoMessage("Could not find any matches. Finding relevant games to rank instead...");
			this.setFilterRelevantOnly();
			nextFaceOffGr = this.faceOffMostRelevant();
		}
		return nextFaceOffGr;
    },

    type: 'FaceOffUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>sn-nerd</sys_created_by>
        <sys_created_on>2024-07-07 17:01:50</sys_created_on>
        <sys_id>64015b3c931fc29079f6bfea2bba10ec</sys_id>
        <sys_mod_count>77</sys_mod_count>
        <sys_name>FaceOffUtils</sys_name>
        <sys_package display_value="FaceOff" source="x_43553_faceoff">fbc13eba93fc0e1079f6bfea2bba1043</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="FaceOff">fbc13eba93fc0e1079f6bfea2bba1043</sys_scope>
        <sys_update_name>sys_script_include_64015b3c931fc29079f6bfea2bba10ec</sys_update_name>
        <sys_updated_by>sn-nerd</sys_updated_by>
        <sys_updated_on>2024-09-01 03:17:20</sys_updated_on>
    </sys_script_include>
</record_update>
